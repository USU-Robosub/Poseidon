/*!
@page ruby_page Ruby Scripts

\htmlonly
<style>
	.macro { color: #a71d5d; }
	.oclass { color: #0086b3; }
	.method { color: #9569ED; }
	.number { color: #3f9930; }
	.string { color: #183691; }
	.rcomment { color: #969896; }
	.parameter { color: #E0842B; }
</style>
\endhtmlonly





\section log_sec Log.rb

This is supposed to be a temporary soltion for logging data, especially from sensors. When executed with "ruby Log.rb" in the terminal, 
the script will chech if a log folder exists - if it doesn't, it creates one to store all log files in. Next the script finds the next available
file names for their respective log files. Finally, the script enters an infinit while loop where, every 1/24 of a second a time stamp is
allocated and written to the log along with its respective data. Note: This script may be optimized in the future with a cleaner implimentation
or will be replaced with a similar implimentation in DiveMaster.

<div class="fragment">
	<div class="line"><span class="macro">require</span> <span class="oclass">Dir</span>.pwd <span class="macro">+</span> <span class="string">"/DiveMaster"</span></div>
	<div class="line"></div>
	<div class="line"><span class="rcomment"># This function will create a new instance of Sensors</span></div>
	<div class="line"><span class="rcomment"># and start lagging sensor data to individual files</span></div>
	<div class="line"><span class="rcomment"># resepective to the sensor for later analysis.</span></div>
	<div class="line"><span class="macro">def</span> <span class="method">start_logging</span> <span class="parameter">file</span></div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;aidx <span class="macro">=</span> <span class="number">1</span>;</div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;gidx <span class="macro">=</span> <span class="number">1</span>;</div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;pidx <span class="macro">=</span> <span class="number">1</span>;</div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;tidx <span class="macro">=</span> <span class="number">1</span>;</div>
	<div class="line"></div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="rcomment"># create Log directory</span></div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="macro">if !</span><span class="oclass">Dir</span>.exists?(file)</div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;puts <span class="string">"Building file: #{file}"</span></div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="oclass">Dir</span>.mkdir(file)</div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="macro">end</span></div>
	<div class="line"></div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="rcomment"># check log files exist</span></div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="macro">while</span> (<span class="oclass">File</span>.exists?(<span class="oclass">File</span>.join(file, <span class="string">"/accel_#{aidx}.log"</span>)))</div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;puts <span class="oclass">File</span>.join(file, <span class="string">"/accel_#{aidx}.log"</span>)</div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aidx <span class="macro">+=</span> <span class="number">1</span></div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="macro">end</span></div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="macro">while</span> (<span class="oclass">File</span>.exists?(<span class="oclass">File</span>.join(file, <span class="string">"/gyro_#{gidx}.log"</span>)))</div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;puts <span class="oclass">File</span>.join(file, <span class="string">"/gyro_#{gidx}.log"</span>)</div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gidx <span class="macro">+=</span> <span class="number">1</span></div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="macro">end</span></div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="macro">while</span> (<span class="oclass">File</span>.exists?(<span class="oclass">File</span>.join(file, <span class="string">"/press_#{pidx}.log"</span>)))</div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;puts <span class="oclass">File</span>.join(file, <span class="string">"/press_#{pidx}.log"</span>)</div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pidx <span class="macro">+=</span> <span class="number">1</span></div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="macro">end</span></div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="macro">while</span> (<span class="oclass">File</span>.exists?(<span class="oclass">File</span>.join(file, <span class="string">"/temp_#{tidx}.log"</span>)))</div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;puts <span class="oclass">File</span>.join(file, <span class="string">"/temp_#{tidx}.log"</span>)</div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tidx <span class="macro">+=</span> <span class="number">1</span></div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="macro">end</span></div>
	<div class="line"></div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;accl <span class="macro">=</span> <span class="oclass">File</span>.<span class="macro">new</span>(<span class="oclass">File</span>.join(file, <span class="string">"/accel_#{aidx}.log"</span>), <span class="string">"w"</span>)</div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;gyro <span class="macro">=</span> <span class="oclass">File</span>.<span class="macro">new</span>(<span class="oclass">File</span>.join(file, <span class="string">"/gyro_#{gidx}.log"</span>), <span class="string">"w"</span>)</div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;pres <span class="macro">=</span> <span class="oclass">File</span>.<span class="macro">new</span>(<span class="oclass">File</span>.join(file, <span class="string">"/press_#{pidx}.log"</span>), <span class="string">"w"</span>)</div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;temp <span class="macro">=</span> <span class="oclass">File</span>.<span class="macro">new</span>(<span class="oclass">File</span>.join(file, <span class="string">"/temp_#{tidx}.log"</span>), <span class="string">"w"</span>)</div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;sensors <span class="macro">=</span> Sensors.<span class="macro">new</span></div>
	<div class="line"></div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;stop <span class="macro">=</span> <span class="oclass">false</span></div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="macro">while !</span>stop</div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sleep(<span class="number">1.0</span><span class="macro">/</span><span class="number">24.0</span>) <span class="rcomment"># 24 samples a second (24Hz)</span></div>
	<div class="line"></div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time_ms <span class="macro">=</span> (<span class="oclass">Time</span>.now.to_f <span class="macro">*</span> <span class="number">1000</span>).to_i</div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;puts <span class="string">"#{time_ms}"</span></div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;accl.puts(<span class="string">"#{time_ms} #{sensors.acceleration}"</span>)</div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gyro.puts(<span class="string">"#{time_ms} #{sensors.gyroscope}"</span>)</div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pres.puts(<span class="string">"#{time_ms} #{sensors.pressure}"</span>)</div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp.puts(<span class="string">"#{time_ms} #{(sensors.temperatureA + sensors.temperatureB) / 2}"</span>)</div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="macro">end</span></div>
	<div class="line"></div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;accl.close</div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;gyro.close</div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;pres.close</div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;temp.close</div>
	<div class="line">&nbsp;&nbsp;&nbsp;&nbsp;puts <span class="string">"End of log"</span></div>
	<div class="line"><span class="macro">end</span></div>
</div><br/><br/>





\section RunServer_sec RunServer.rb

After the additional of Rice headers into the IMUSensor, the server end needed an update to the way things compiled. One solution, which preserves
the new features in IMUSensor, is to compile the server as a shared object. This is the script required to run this shared object. We include the
shared object, create a new instance of Server, assign to it a port number to listen on, and finally run the server.

<div class="fragment">
	<div class="line"><span class="macro">require</span> <span class="oclass">Dir</span>.pwd <span class="macro">+</span> <span class="string">"/Server"</span></div>
	<div class="line"></div>
	<div class="line">test <span class="macro">=</span> <span class="oclass">Server</span>.<span class="macro">new</span></div>
	<div class="line">test.setPort <span class="number">4322</span></div>
	<div class="line">test.start</div>
</div><br/><br/>





\section extconf_s_sec server/extconf.rb

This script generates the basic Rice Makefile for a shared object, which can then be included in a ruby scripting environment. This script is 
specific to the shared-object version of the server end of DiveMaster.

<div class="fragment">
	<div class="line"><span class="macro">require</span> <span class="string">'mkmf-rice'</span></div>
	<div class="line"></div>
	<div class="line">str_flg <span class="macro">=</span> <span class="string">" -std=c++0x -O3 -Wall -Wextra -Wdouble-promotion "</span> <span class="macro">+</span></div>
	<div class="line"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="string">"-Wno-deprecated -Ilibs/pstreams-0.8.1"</span></div>
	<div class="line">$CFLAGS &lt;&lt; str_flg</div>
	<div class="line"></div>
	<div class="line">create_makefile(<span class="string">'Server'</span>)</div>
</div><br/><br/>





\section extconf_k_sec kernel/extconf.rb

This script generates the basic Rice Makefile for a shared object, which can then be included in a ruby scripting environment. This script is
specific to the DiveMaster kernel - the heart of our projects.

<div class="fragment">
	<div class="line"><span class="macro">require</span> <span class="string">'rubygems'</span></div>
	<div class="line"><span class="macro">require</span> <span class="string">'mkmf-rice'</span></div>
	<div class="line"></div>
	<div class="line"><span class="rcomment"># compiler flags</span></div>
	<div class="line">$CFLAGS &lt;&lt; <span class="macro">=</span> <span class="string">" -std=c++0x -O3 -Wall -Wextra -Wdouble-promotion -Wfloat-equal -Wunsafe-loop-optimizations -Wno-deprecated"</span></div>
	<div class="line"></div>
	<div class="line"><span class="rcomment"># linker flags</span></div>
	<div class="line"><span class="rcomment"># $LFLAGS &lt;&lt; " -lmath" # link libmath.so</span></div>
	<div class="line"></div>
	<div class="line"><span class="rcomment"># make Makefile</span></div>
	<div class="line">create_makefile(<span class="string">'Server'</span>)</div>
</div><br/><br/>





\section rubyPrefix_sec RubyPrefix.rb

While remotely connected to the DiveMaster's Server, one may send a ruby snippet to be executed for autonomous exploration. The ruby snippet is
appended to the script below before execution.

<div class="fragment">
	<div class="line"><span class="rcomment"># Generally reliable submarine control, containing pool-tested functionality</span></div>
	<div class="line"></div>
	<div class="line"><span class="macro">require</span> <span class="oclass">Dir</span>.pwd <span class="macro">+</span> <span class="string">"/kernel/DiveMaster"</span></div>
	<div class="line"></div>
	<div class="line"><span class="macro">module</span> <span class="method">Thrust</span></div>
	<div class="line"> &nbsp;&nbsp;&nbsp;<span class="oclass">FULL_AHEAD</span> <span class="macro">=</span> <span class="number">1</span></div>
	<div class="line"> &nbsp;&nbsp;&nbsp;<span class="oclass">TWO_THIRDS_AHEAD</span> <span class="macro">=</span> <span class="number">2</span> <span class="macro">/</span> <span class="number">3</span></div>
	<div class="line"> &nbsp;&nbsp;&nbsp;<span class="oclass">HALF_AHEAD</span> <span class="macro">=</span> <span class="number">1</span> <span class="macro">/</span> <span class="number">2</span></div>
	<div class="line"> &nbsp;&nbsp;&nbsp;<span class="oclass">ONE_THIRD_AHEAD</span> <span class="macro">=</span> <span class="number">1</span> <span class="macro">/</span> <span class="number">3</span></div>
	<div class="line"> &nbsp;&nbsp;&nbsp;<span class="oclass">NEUTRAL</span> <span class="macro">=</span> <span class="number">0</span></div>
	<div class="line"> &nbsp;&nbsp;&nbsp;<span class="oclass">ONE_THIRD_REVERSE</span> <span class="macro">= -</span><span class="number">1</span> <span class="macro">/</span> <span class="number">3</span></div>
	<div class="line"> &nbsp;&nbsp;&nbsp;<span class="oclass">HALF_REVERSE</span> <span class="macro">= -</span><span class="number">1</span> <span class="macro">/</span> <span class="number">2</span></div>
	<div class="line"> &nbsp;&nbsp;&nbsp;<span class="oclass">TWO_THIRDS_REVERSE</span> <span class="macro">= -</span><span class="number">2</span> <span class="macro">/</span> <span class="number">3</span></div>
	<div class="line"> &nbsp;&nbsp;&nbsp;<span class="oclass">FULL_REVERSE</span> <span class="macro">= -</span><span class="number">1</span></div>
	<div class="line"><span class="macro">end</span></div>
	<div class="line"></div>
	<div class="line"><span class="rcomment"># enable ESCs otherwise they won't run</span></div>
	<div class="line">power <span class="macro">=</span> <span class="oclass">PowerController</span>.<span class="macro">new</span></div>
	<div class="line">power.turnOnESCs()</div>
	<div class="line"></div>
	<div class="line">print <span class="string">"Creating ThrustController instance...\n"</span></div>
	<div class="line">thrustController <span class="macro">=</span> <span class="oclass">%ThrustController</span>.<span class="macro">new</span></div>
	<div class="line"></div>
	<div class="line">print <span class="string">"Pausing for a while...\n"</span></div>
	<div class="line">sleep(<span class="number">5</span>)</div>
</div><br/><br/>





\section stable_sec stable.rb

This script is intended for observing the functionality of all stable features of the DiveMaster kernel. However, most tests are made
through the ruby sandbox environment: irb - more often than through this script.

<div class="fragment">
	<div class="line"><span class="rcomment"># Generally reliable submarine control, containing pool-tested functionality</span></div>
	<div class="line"></div>
	<div class="line"><span class="macro">require</span> <span class="oclass">Dir</span>.pwd <span class="macro">+</span> <span class="string">"/kernel/DiveMaster"</span></div>
	<div class="line"></div>
	<div class="line"><span class="macro">module</span> <span class="method">Thrust</span></div>
	<div class="line"> &nbsp;&nbsp;&nbsp;<span class="oclass">FULL_AHEAD</span> <span class="macro">=</span> <span class="number">1</span></div>
	<div class="line"> &nbsp;&nbsp;&nbsp;<span class="oclass">TWO_THIRDS_AHEAD</span> <span class="macro">=</span> <span class="number">2</span> <span class="macro">/</span> <span class="number">3</span></div>
	<div class="line"> &nbsp;&nbsp;&nbsp;<span class="oclass">HALF_AHEAD</span> <span class="macro">=</span> <span class="number">1</span> <span class="macro">/</span> <span class="number">2</span></div>
	<div class="line"> &nbsp;&nbsp;&nbsp;<span class="oclass">ONE_THIRD_AHEAD</span> <span class="macro">=</span> <span class="number">1</span> <span class="macro">/</span> <span class="number">3</span></div>
	<div class="line"> &nbsp;&nbsp;&nbsp;<span class="oclass">NEUTRAL</span> <span class="macro">=</span> <span class="number">0</span></div>
	<div class="line"> &nbsp;&nbsp;&nbsp;<span class="oclass">ONE_THIRD_REVERSE</span> <span class="macro">= -</span><span class="number">1</span> <span class="macro">/</span> <span class="number">3</span></div>
	<div class="line"> &nbsp;&nbsp;&nbsp;<span class="oclass">HALF_REVERSE</span> <span class="macro">= -</span><span class="number">1</span> <span class="macro">/</span> <span class="number">2</span></div>
	<div class="line"> &nbsp;&nbsp;&nbsp;<span class="oclass">TWO_THIRDS_REVERSE</span> <span class="macro">= -</span><span class="number">2</span> <span class="macro">/</span> <span class="number">3</span></div>
	<div class="line"> &nbsp;&nbsp;&nbsp;<span class="oclass">FULL_REVERSE</span> <span class="macro">= -</span><span class="number">1</span></div>
	<div class="line"><span class="macro">end</span></div>
	<div class="line"></div>
	<div class="line"><span class="rcomment"># enable ESCs otherwise they won't run</span></div>
	<div class="line">power <span class="macro">=</span> <span class="oclass">PowerController</span>.<span class="macro">new</span></div>
	<div class="line">power.turnOnESCs()</div>
	<div class="line"></div>
	<div class="line">print <span class="string">"Creating ThrustController instance...\n"</span></div>
	<div class="line">thrustController <span class="macro">=</span> <span class="oclass">%ThrustController</span>.<span class="macro">new</span></div>
	<div class="line"></div>
	<div class="line">print <span class="string">"Pausing for a while...\n"</span></div>
	<div class="line">sleep(<span class="number">5</span>)</div>
</div><br/><br/>





\section kernelDev_sec kernelDev.rb

This script is intended for testing the functionality of new features added to the DiverMaster kernel. However, most tests are made
through the ruby sandbox environment: irb - more often than through this script.

<div class="fragment">
	<div class="line"><span class="rcomment"># for testing of very new and Rice-exposed API or driver methods</span></div>
	<div class="line"></div>
	<div class="line"><span class="macro">require</span> <span class="oclass">Dir</span>.pwd <span class="macro">+</span> <span class="string">"/kernel/DiveMaster"</span></div>
	<div class="line"></div>
	<div class="line">print <span class="string">"Creating IMUSensor instance...\n"</span></div>
	<div class="line">imuSensor <span class="macro">=</span> <span class="oclass">Sensors</span>.<span class="macro">new</span></div>
	<div class="line"></div>
	<div class="line">puts imuSensor.readTemperature</div>
	<div class="line">puts imuSensor.readPressure</div>
	<div class="line">puts imuSensor.readSealevel</div>
	<div class="line">puts imuSensor.readAltitude</div>
	<div class="line">puts imuSensor.readCompass</div>
	<div class="line">puts imuSensor.readAcceleration</div>
	<div class="line">puts imuSensor.readGyro</div>
	<div class="line">puts imuSensor.readTemp</div>
	<div class="line"></div>
	<div class="line">sleep <span class="number">5</span></div>
	<div class="line"></div>
	<div class="line">print <span class="string">"Sensor test complete!\n"</span></div>
</div><br/><br/>





\section rubyDev_sec rubyDev.rb

This script is primarilly used for testing various thrusters, hardware, and thruster controls.

<div class="fragment">
	<div class="line"><span class="rcomment"># for testing new sub controls and maneuvers</span></div>
	<div class="line"></div>
	<div class="line"><span class="macro">require</span> <span class="oclass">Dir</span>.pwd <span class="macro">+</span> <span class="string">"/kernel/DiveMaster"</span></div>
	<div class="line"></div>
	<div class="line"><span class="macro">module</span> Thrust</div>
	<div class="line"> &nbsp;&nbsp;&nbsp;<span class="oclass">FULL_AHEAD</span> <span class="macro">=</span> <span class="number">1</span></div>
	<div class="line"> &nbsp;&nbsp;&nbsp;<span class="oclass">TWO_THIRDS_AHEAD</span> <span class="macro">=</span> <span class="number">2</span> <span class="macro">/</span> <span class="number">3</span></div>
	<div class="line"> &nbsp;&nbsp;&nbsp;<span class="oclass">HALF_AHEAD</span> <span class="macro">=</span> <span class="number">1</span> <span class="macro">/</span> <span class="number">2</span></div>
	<div class="line"> &nbsp;&nbsp;&nbsp;<span class="oclass">ONE_THIRD_AHEAD</span> <span class="macro">=</span> <span class="number">1</span> <span class="macro">/</span> <span class="number">3</span></div>
	<div class="line"> &nbsp;&nbsp;&nbsp;<span class="oclass">NEUTRAL</span> <span class="macro">=</span> <span class="number">0</span></div>
	<div class="line"> &nbsp;&nbsp;&nbsp;<span class="oclass">ONE_THIRD_REVERSE</span> <span class="macro">= -</span><span class="number">1</span> <span class="macro">/</span> <span class="number">3</span></div>
	<div class="line"> &nbsp;&nbsp;&nbsp;<span class="oclass">HALF_REVERSE</span> <span class="macro">= -</span><span class="number">1</span> <span class="macro">/</span> <span class="number">2</span></div>
	<div class="line"> &nbsp;&nbsp;&nbsp;<span class="oclass">TWO_THIRDS_REVERSE</span> <span class="macro">= -</span><span class="number">2</span> <span class="macro">/</span> <span class="number">3</span></div>
	<div class="line"> &nbsp;&nbsp;&nbsp;<span class="oclass">FULL_REVERSE</span> <span class="macro">= -</span><span class="number">1</span></div>
	<div class="line"><span class="macro">end</span></div>
	<div class="line"></div>
	<div class="line"><span class="rcomment"># enable ESCs otherwise they won't run</span></div>
	<div class="line">power <span class="macro">=</span> <span class="oclass">%PowerManagement</span>.<span class="macro">new</span></div>
	<div class="line">power.turnOnESCs()</div>
	<div class="line"></div>
	<div class="line">print <span class="string">"Creating ThrustController instance...\n"</span></div>
	<div class="line">thrustController <span class="macro">=</span> <span class="oclass">%ThrustController</span>.<span class="macro">new</span></div>
	<div class="line"></div>
	<div class="line">print <span class="string">"Pausing for a while...\n"</span></div>
	<div class="line">sleep(<span class="number">5</span>)</div>
	<div class="line"></div>
	<div class="line">print <span class="string">"Exploring extremes of forward and backwards thrusters...\n"</span></div>
	<div class="line">thrustController.accelerateForward(<span class="oclass">Thrust::FULL_AHEAD</span>,   <span class="number">10</span>)</div>
	<div class="line">thrustController.accelerateForward(<span class="oclass">Thrust::FULL_REVERSE</span>, <span class="number">15</span>)</div>
	<div class="line">thrustController.accelerateForward(<span class="oclass">Thrust::NEUTRAL</span>,      <span class="number">5</span>)</div>
	<div class="line"></div>
	<div class="line">print <span class="string">"Pausing for a while...\n"</span></div>
	<div class="line">sleep(<span class="number">3</span>)</div>
	<div class="line"></div>
	<div class="line">print <span class="string">"Exploring extremes of left and right thrusters...\n"</span></div>
	<div class="line">thrustController.acceleratePan(<span class="oclass">Thrust::FULL_AHEAD</span>,   <span class="number">10</span>)</div>
	<div class="line">thrustController.acceleratePan(<span class="oclass">Thrust::FULL_REVERSE</span>, <span class="number">15</span>)</div>
	<div class="line">thrustController.acceleratePan(<span class="oclass">Thrust::NEUTRAL</span>,      <span class="number">5</span>)</div>
	<div class="line"></div>
	<div class="line">print <span class="string">"Pausing for a while...\n"</span></div>
	<div class="line">sleep(<span class="number">3</span>)</div>
	<div class="line"></div>
	<div class="line">print <span class="string">"Exploring extremes of up and down thrusters...\n"</span></div>
	<div class="line">thrustController.accelerateDive(<span class="oclass">Thrust::FULL_AHEAD</span>,   <span class="number">10</span>)</div>
	<div class="line">thrustController.accelerateDive(<span class="oclass">Thrust::FULL_REVERSE</span>, <span class="number">15</span>)</div>
	<div class="line">thrustController.accelerateDive(<span class="oclass">Thrust::NEUTRAL</span>,      <span class="number">5</span>)</div>
	<div class="line"></div>
	<div class="line">print <span class="string">"Pausing for a while...\n"</span></div>
	<div class="line">sleep(<span class="number">3</span>)</div>
	<div class="line"></div>
	<div class="line">print <span class="string">"Exploring extremes of yaw rates...\n"</span></div>
	<div class="line">thrustController.accelerateYaw(<span class="oclass">Thrust::FULL_AHEAD</span>,     <span class="number">10</span>)</div>
	<div class="line">thrustController.accelerateYaw(<span class="oclass">Thrust::FULL_REVERSE</span>,   <span class="number">15</span>)</div>
	<div class="line">thrustController.accelerateYaw(<span class="oclass">Thrust::NEUTRAL</span>,        <span class="number">5</span>)</div>
	<div class="line"></div>
	<div class="line">print <span class="string">"Pausing for a while...\n"</span></div>
	<div class="line">sleep(<span class="number">3</span>)</div>
	<div class="line"></div>
	<div class="line">print <span class="string">"Pausing for a while...\n"</span></div>
	<div class="line">sleep(<span class="number">5</span>)</div>
	<div class="line"></div>
	<div class="line">print <span class="string">"Firing all thrusters...\n"</span></div>
	<div class="line">thrustController.accelerateForward(<span class="oclass">Thrust::FULL_AHEAD</span>, <span class="number">4</span>)</div>
	<div class="line">thrustController.acceleratePan(<span class="oclass">Thrust::FULL_AHEAD</span>,   <span class="number">4</span>)</div>
	<div class="line">thrustController.accelerateDive(<span class="oclass">Thrust::FULL_AHEAD</span>,    <span class="number">4</span>)</div>
	<div class="line"></div>
	<div class="line">print <span class="string">"Pausing for a while...\n"</span></div>
	<div class="line">sleep(<span class="number">5</span>)</div>
	<div class="line"></div>
	<div class="line">print <span class="string">"Backing down...\n"</span></div>
	<div class="line">thrustController.accelerateForward(<span class="oclass">Thrust::NEUTRAL</span>, <span class="number">4</span>)</div>
	<div class="line">thrustController.acceleratePan(<span class="oclass">Thrust::NEUTRAL</span>,   <span class="number">4</span>)</div>
	<div class="line">thrustController.accelerateDive(<span class="oclass">Thrust::NEUTRAL</span>,    <span class="number">4</span>)</div>
	<div class="line"></div>
	<div class="line">print <span class="string">"Test complete!\n"</span></div>
</div><br/><br/>





*/
